# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pb2.users.users_pb2 as users__pb2


GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in users_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )

class UsersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateField = channel.unary_unary(
                '/users.Users/UpdateField',
                request_serializer=users__pb2.UpdateFieldRequest.SerializeToString,
                response_deserializer=users__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_stream(
                '/users.Users/GetUsers',
                request_serializer=users__pb2.UsersRequest.SerializeToString,
                response_deserializer=users__pb2.UserResponse.FromString,
                _registered_method=True)
        self.GetUserById = channel.unary_unary(
                '/users.Users/GetUserById',
                request_serializer=users__pb2.UserId.SerializeToString,
                response_deserializer=users__pb2.UserResponse.FromString,
                _registered_method=True)
        self.ConfirmPassport = channel.unary_stream(
                '/users.Users/ConfirmPassport',
                request_serializer=users__pb2.PassportRequest.SerializeToString,
                response_deserializer=users__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.GetBlackList = channel.unary_stream(
                '/users.Users/GetBlackList',
                request_serializer=users__pb2.BlackListRequest.SerializeToString,
                response_deserializer=users__pb2.UserId.FromString,
                _registered_method=True)
        self.BanUser = channel.unary_unary(
                '/users.Users/BanUser',
                request_serializer=users__pb2.BanRequest.SerializeToString,
                response_deserializer=users__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.QuizAnswer = channel.unary_unary(
                '/users.Users/QuizAnswer',
                request_serializer=users__pb2.QuizRequest.SerializeToString,
                response_deserializer=users__pb2.BaseResponse.FromString,
                _registered_method=True)


class UsersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateField(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPassport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlackList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BanUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuizAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateField': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateField,
                    request_deserializer=users__pb2.UpdateFieldRequest.FromString,
                    response_serializer=users__pb2.BaseResponse.SerializeToString,
            ),
            'GetUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=users__pb2.UsersRequest.FromString,
                    response_serializer=users__pb2.UserResponse.SerializeToString,
            ),
            'GetUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserById,
                    request_deserializer=users__pb2.UserId.FromString,
                    response_serializer=users__pb2.UserResponse.SerializeToString,
            ),
            'ConfirmPassport': grpc.unary_stream_rpc_method_handler(
                    servicer.ConfirmPassport,
                    request_deserializer=users__pb2.PassportRequest.FromString,
                    response_serializer=users__pb2.BaseResponse.SerializeToString,
            ),
            'GetBlackList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBlackList,
                    request_deserializer=users__pb2.BlackListRequest.FromString,
                    response_serializer=users__pb2.UserId.SerializeToString,
            ),
            'BanUser': grpc.unary_unary_rpc_method_handler(
                    servicer.BanUser,
                    request_deserializer=users__pb2.BanRequest.FromString,
                    response_serializer=users__pb2.BaseResponse.SerializeToString,
            ),
            'QuizAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.QuizAnswer,
                    request_deserializer=users__pb2.QuizRequest.FromString,
                    response_serializer=users__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'users.Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('users.Users', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Users(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateField(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/users.Users/UpdateField',
            users__pb2.UpdateFieldRequest.SerializeToString,
            users__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/users.Users/GetUsers',
            users__pb2.UsersRequest.SerializeToString,
            users__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/users.Users/GetUserById',
            users__pb2.UserId.SerializeToString,
            users__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmPassport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/users.Users/ConfirmPassport',
            users__pb2.PassportRequest.SerializeToString,
            users__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlackList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/users.Users/GetBlackList',
            users__pb2.BlackListRequest.SerializeToString,
            users__pb2.UserId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BanUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/users.Users/BanUser',
            users__pb2.BanRequest.SerializeToString,
            users__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuizAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/users.Users/QuizAnswer',
            users__pb2.QuizRequest.SerializeToString,
            users__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
